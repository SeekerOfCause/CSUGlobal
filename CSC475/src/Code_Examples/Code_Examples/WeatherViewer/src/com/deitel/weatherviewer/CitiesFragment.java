// CitiesFragment.java
// Fragment displaying list of favorite cities.
package com.deitel.weatherviewer;

import java.util.ArrayList;
import java.util.List;

import android.app.AlertDialog;
import android.app.ListFragment;
import android.content.Context;
import android.content.DialogInterface;
import android.content.SharedPreferences;
import android.content.SharedPreferences.Editor;
import android.content.res.Resources;
import android.graphics.Color;
import android.os.Bundle;
import android.view.Gravity;
import android.view.View;
import android.view.ViewGroup;
import android.widget.AdapterView;
import android.widget.AdapterView.OnItemLongClickListener;
import android.widget.ArrayAdapter;
import android.widget.ListView;
import android.widget.TextView;
import android.widget.Toast;

public class CitiesFragment extends ListFragment 
{
   private int currentCityIndex; // the currently selected list position
   
   // key used to save list selection in a Bundle
   private static final String CURRENT_CITY_KEY = "current_city";

   public ArrayList<String> citiesArrayList; // list of city names
   private CitiesListChangeListener citiesListChangeListener; 
   private ArrayAdapter<String> citiesArrayAdapter;
   
   // interface describing listener for changes to selected city and
   // preferred city
   public interface CitiesListChangeListener 
   {
      // the selected city is changed
      public void onSelectedCityChanged(String cityNameString);
      
      // the preferred city is changed
      public void onPreferredCityChanged(String cityNameString);
   } // end interface CitiesListChangeListener
   
   // called when the parent Activity is created
   @Override
   public void onActivityCreated(Bundle savedInstanceStateBundle) 
   {
     super.onActivityCreated(savedInstanceStateBundle);
      
     // the the given Bundle has state information
     if (savedInstanceStateBundle != null) 
     {
       // get the last selected city from the Bundle
        currentCityIndex = savedInstanceStateBundle.getInt(
           CURRENT_CITY_KEY);
     } // end if

     // create ArrayList to save city names
     citiesArrayList = new ArrayList<String>(); 

     // set the Fragment's ListView adapter 
     setListAdapter(new CitiesArrayAdapter<String>(getActivity(), 
        R.layout.city_list_item, citiesArrayList)); 
     
     ListView thisListView = getListView(); // get the Fragment's ListView
     citiesArrayAdapter = (ArrayAdapter<String>)getListAdapter();
     
     // allow only one city to be selected at a time
     thisListView.setChoiceMode(ListView.CHOICE_MODE_SINGLE);
     thisListView.setBackgroundColor(Color.WHITE); // set background color
     thisListView.setOnItemLongClickListener(citiesOnItemLongClickListener);
   } // end method onActivityCreated
   
   // set CitiesListChangeListener
   public void setCitiesListChangeListener(
      CitiesListChangeListener listener)
   {
      citiesListChangeListener = listener; 
   } // end method setCitiesChangeListener
   
   // custom ArrayAdapter for CitiesFragment ListView
   private class CitiesArrayAdapter<T> extends ArrayAdapter<String> 
   {
      private Context context; // this Fragment's Activity's Context
     
      // public constructor for CitiesArrayAdapter
      public CitiesArrayAdapter(Context context, int textViewResourceId, 
         List<String> objects) 
      {
         super(context, textViewResourceId, objects);
         this.context = context;
      } // end CitiesArrayAdapter constructor

      // get ListView item for the given position
      @Override
      public View getView(int position, View convertView, ViewGroup parent) 
      {
         // get the TextView generated by ArrayAdapter's getView method
         TextView listItemTextView = (TextView) 
            super.getView(position, convertView, parent);
         
         // if this item is the preferred city
         if (isPreferredCity(listItemTextView.getText().toString()))
         {
            // display a star to the right of the list item TextView
            listItemTextView.setCompoundDrawablesWithIntrinsicBounds(0, 0, 
               android.R.drawable.btn_star_big_on, 0);
         } // end if
         else 
         {
            // clear any compound drawables on the list item TextView
            listItemTextView.setCompoundDrawablesWithIntrinsicBounds(0, 0, 
               0, 0);
         } // end else
         return listItemTextView;
      } // end method getView
   
      // is the given city the preferred city?
      private boolean isPreferredCity(String cityString)
      {
         // get the app's SharedPreferences
         SharedPreferences preferredCitySharedPreferences = 
            context.getSharedPreferences(
            WeatherViewerActivity.SHARED_PREFERENCES_NAME, 
            Context.MODE_PRIVATE);
      
         // return true if the given name matches preferred city's name
         return cityString.equals(preferredCitySharedPreferences.getString(
            WeatherViewerActivity.PREFERRED_CITY_NAME_KEY, null));
      } // end method isPreferredCity
   } // end class CitiesArrayAdapter
   
   // responds to events generated by long pressing ListView item
   private OnItemLongClickListener citiesOnItemLongClickListener = 
      new OnItemLongClickListener() 
   {
      // called when a ListView item is long-pressed
      @Override
      public boolean onItemLongClick(AdapterView<?> listView, View view, 
         int arg2, long arg3) 
      {
         // get the given View's Context
         final Context context = view.getContext();
         
         // get Resources to load Strings from xml
         final Resources resources = context.getResources();
         
         // get the selected city's name
         final String cityNameString = 
            ((TextView) view).getText().toString();
          
         // create a new AlertDialog
         AlertDialog.Builder builder = new AlertDialog.Builder(context);
         
         // set the AlertDialog's message
         builder.setMessage(resources.getString(
            R.string.city_dialog_message_prefix) + cityNameString + 
            resources.getString(R.string.city_dialog_message_postfix));
         
         // set the AlertDialog's positive Button
         builder.setPositiveButton(resources.getString(
            R.string.city_dialog_preferred), 
            new DialogInterface.OnClickListener()
            {
               @Override
               public void onClick(DialogInterface dialog, int which) 
               {
                  citiesListChangeListener.onPreferredCityChanged(
                     cityNameString);
                  citiesArrayAdapter.notifyDataSetChanged();
               } // end method onClick
           }); // end DialogInterface.OnClickListener
         // set the AlertDialog's neutral Button
         builder.setNeutralButton(resources.getString(
            R.string.city_dialog_delete), 
            new DialogInterface.OnClickListener() 
            {
              // called when the "Delete" Button is clicked
               public void onClick(DialogInterface dialog, int id) 
               {
                  // if this is the last city
                  if (citiesArrayAdapter.getCount() == 1)
                  {
                     // inform the user they can't delete the last city
                     Toast lastCityToast = 
                        Toast.makeText(context, resources.getString(
                        R.string.last_city_warning), Toast.LENGTH_LONG);
                     lastCityToast.setGravity(Gravity.CENTER, 0, 0);
                     lastCityToast.show(); // show the Toast
                     return; // exit the method
                  } // end if
                  
                  // remove the city
                  citiesArrayAdapter.remove(cityNameString); 
                  
                  // get the app's shared preferences
                  SharedPreferences sharedPreferences = 
                     context.getSharedPreferences(
                        WeatherViewerActivity.SHARED_PREFERENCES_NAME, 
                        Context.MODE_PRIVATE);
                  
                  // remove the deleted city from SharedPreferences
                  Editor preferencesEditor = sharedPreferences.edit();
                  preferencesEditor.remove(cityNameString);
                  preferencesEditor.apply();
                  
                  // get the current preferred city
                  String preferredCityString = 
                     sharedPreferences.getString(
                        WeatherViewerActivity.PREFERRED_CITY_NAME_KEY, 
                        resources.getString(R.string.default_zipcode));
                  
                  // if the preferred city was deleted
                  if (cityNameString.equals(preferredCityString))
                  {
                    // set a new preferred city
                     citiesListChangeListener.onPreferredCityChanged(
                        citiesArrayList.get(0));
                  } // end if
                  else if (cityNameString.equals(citiesArrayList.get(
                     currentCityIndex)))
                  {
                    // load the preferred city's forecast
                    citiesListChangeListener.onSelectedCityChanged(
                        preferredCityString); 
                  } // end else if
               } // end method onClick
            }); // end OnClickListener
         // set the AlertDialog's negative Button
         builder.setNegativeButton(resources.getString(
            R.string.city_dialog_cancel), 
            new DialogInterface.OnClickListener() 
            {
              // called when the "No" Button is clicked
               public void onClick(DialogInterface dialog, int id) 
               {
                  dialog.cancel(); // dismiss the AlertDialog
               } // end method onClick
            }); // end OnClickListener
            
         builder.create().show(); // display the AlertDialog            
         return true;
      } // end citiesOnItemLongClickListener
   }; // end OnItemLongClickListener
   
   // save the Fragment's state
   @Override 
   public void onSaveInstanceState(Bundle outStateBundle) 
   {
      super.onSaveInstanceState(outStateBundle);
      
      // save current selected city to the Bundle
      outStateBundle.putInt(CURRENT_CITY_KEY, currentCityIndex);
   } // end onSaveInstanceState
   
   // add a new city to the list
   public void addCity(String cityNameString, boolean select) 
   {
      citiesArrayAdapter.add(cityNameString);
      citiesArrayAdapter.sort(String.CASE_INSENSITIVE_ORDER);
     
      if (select) // if we should select the new city
      {
         // inform the CitiesListChangeListener 
         citiesListChangeListener.onSelectedCityChanged(cityNameString);
      } // end if
   } // end method addCity
   
   // responds to a ListView item click
   @Override
   public void onListItemClick(ListView l, View v, int position, long id) 
   {
      // tell the Activity to update the ForecastFragment
      citiesListChangeListener.onSelectedCityChanged(((TextView)v).
         getText().toString());
      currentCityIndex = position; // save current selected position
   } // end method onListItemClick
} // end class CitiesFragment